// Code generated by protoc-gen-gotemplate; DO NOT EDIT.

package {{ .Package }}

import (
    "github.com/monzo/typhon"
)

{{- range .RPCs }}

    // -------------------------
    // {{ .Method }} {{ .Path }}
    // -------------------------

    // Method is the HTTP method used for this request.
    // It is inferred from the name of the Request using a prefix match.
    func (body {{ .Request}}) Method() string {
        return "{{ .Method }}"
    }

    // Path is the HTTP path to this endpoint
    func (body {{ .Request }}) Path() string {
        return "{{ .Path }}"
    }

    // ServiceName is the long-form service name, e.g. service.brand.
    func (body {{ .Request }}) ServiceName() string {
        return "{{ $.Host }}"
    }

    // Host is the short-form service name, e.g. s-brand.
    func (body {{ .Request }}) Host() string {
        return "{{ $.ShortHost }}"
    }

    // FullPath is the full routable URL to this service.
    func (body {{ .Request }}) FullPath() string {
        return "http://{{ $.ShortHost }}{{ .Path }}"
    }

    // Request returns a typhon request for this type.
    func (body {{ .Request }}) Request(ctx context.Context) typhon.Request {
        return typhon.NewRequest(ctx, body.Method(), body.FullPath(), body)
    }

    // Response is a shortcut for .Send(ctx).DecodeResponse(), for when you do not need a future.
    // This saves on boilerplate throughout the codebase and you should use this method unless you need parallel requests.
    func (body {{ .Request }}) Response(ctx context.Context) ({{ .Response }}, error) {
        return body.Send(ctx).DecodeResponse()
    }

    // Send creates a typhon future and immediately returns it.
    // To wait for the request to complete and return the response, use DecodeResponse on the returned future.
    func (body {{ .Response }}) Send(ctx context.Context) ({{ .Future }}, error) {
        return &{{ .Future }}{Future: body.Request(ctx).Send()}
    }

    // {{ .Future }} is an intermediate future used for parallel requests with {{ .Request }}
    type {{ .Future }} struct {
        Future   *typhon.ResponseFuture
        Response *typhon.Response
    }

    // Done waits for a response from a typhon future, and is safe to call multiple times in a row.
    func (f *{{ .Future }}) Done() {
        if f.Response == nil {
            rsp := f.Future.Response()
            f.Response = &rsp
        }
    }

    // DecodeResponse waits for this future to be done and then decodes the response into a concrete type.
    func (f *{{ .Future }}) DecodeResponse() ({{ .Response }}, error) {
        f.Done()

        body := &{{ .Response }}{}
        if err := f.Response.Decode(body); err != nil {
            return nil, err
        }
    }

{{- end }}
